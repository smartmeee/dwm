Page rank implementation
import numpy as np
# Step 1: Create adjacency matrix
# 0→1, 1→2, 2→0, 3→0 & 2
A = np.array([
 [0, 1, 0, 0], # 0 -> 1
 [0, 0, 1, 0], # 1 -> 2
 [1, 0, 0, 0], # 2 -> 0
 [1, 0, 1, 0] # 3 -> 0, 2
])
# Step 2: Number of pages
n = len(A)
# Step 3: Convert to probability matrix (column-stochastic)
M = np.zeros((n, n))
for i in range(n):
 out_links = np.sum(A[i])
 if out_links == 0:
 M[:, i] = 1 / n # if no outlinks (dangling page)
 else:
 M[:, i] = A[i] / out_links
# Step 4: PageRank calculation
d = 0.85 # damping factor
rank = np.ones(n) / n # start equally
for i in range(100):
 rank_new = (1 - d) / n + d * M.T.dot(rank)
 if np.allclose(rank, rank_new, atol=1e-6):
break
 rank = rank_new
# Step 5: Print result
print("Final PageRank values:")
for i, val in enumerate(rank):
 print(f"Page {i}: {val:.3f}")
output:
Final PageRank values:
Page 0: 0.372
Page 1: 0.196
Page 2: 0.356
Page 3: 0.076
